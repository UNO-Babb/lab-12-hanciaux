Name: Hunter Anciaux

Number of elements: 10 000

Bubble Sort
Sorted:     2.58700 seconds
Reversed:   5.72172 seconds
Random:     4.74388 seconds

Bubble Sort Early Exit
Sorted:     0.00054 seconds
Reversed:   5.98029 seconds
Random:     4.45955 seconds

Selection Sort
Sorted:     1.90345 seconds
Reversed:   1.89272 seconds
Random:     2.02765 seconds

Insertion Sort
Sorted:     0.00091 seconds
Reversed:   3.69634 seconds
Random:     2.22626 seconds

Merge Sort
Sorted:     0.02159 seconds
Reversed:   0.01760 seconds
Random:     0.02068 seconds

Questions to answer:
1) What was the worst case scenario for any sorting technique?
    Bubble sort reversed took the most time.

2) The first 3 sorts have the same runtime of O(n^2). Why were the times different? Why would one be more efficient than the others?
    They were already in the correct spot so bubble sort early exit worked a lot quicker.

3) Why was merge sort so much more efficient?
    It has a runtime of O(N * log(n))  which is much faster than the other methods.

4) The built-in sorting technique for most programming languages is known as TimSort.
This is a merge sort until the arrays have fewer than 10 elements, then it does an insertion sort. Why would this be useful?
    Insertion sort is basically just as fast for lists with 10ish items or less.

5) What issues can you see with a recursive sorting technique like merge sort?
    If an item has many digits then recursive sorting would be quite inefficient.